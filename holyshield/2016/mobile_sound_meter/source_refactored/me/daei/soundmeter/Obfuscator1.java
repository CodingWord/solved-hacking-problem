package me.daei.soundmeter;

/* renamed from: me.daei.soundmeter.b */
public class Obfuscator1 {
    public static int encrypt(char c) {
        char[] cArr = new char[]{'\u0017', '\n', '\u0016', '\u0005', '\u000e', '!', '\"', 'P', 'B', '7', '\u0019', '\u0010', '9', 'R', 'J', '\u001d', 'E', 'U', ',', 'C', '\t', '[', '1', '\u0013', '\\', '8', '\u001e', 'A', 'X', '+', '\u001c', '\u0000', '@', '\u000f', '*', '(', '2', '\u0001', '?', 'G', 'I', '\b', '\u0018', '\u0004', '#', 'W', '\u001b', '\u0003', ')', '\u0015', 'M', '\u0006', 'D', '\u0002', '.', '\u001a', ';', '>', '/', '%', 'V', 'H', '\u0007', 'N', '6', ']', '5', '\u0012', 'O', 'T', '-', '\u0011', 'Y', '3', '=', '\'', '&', 'Z', '<', ':', '\u0014', 'Q', 'L', '\r', '\u001f', '\f', '0', 'S', 'K', ' ', 'F', '\u000b', '$', '4'};
        char[] cArr2 = new char[]{':', 'S', 'p', '-', '3', 'z', '^', '#', 'D', 'T', '\'', '{', 'n', '~', '\\', 'y', 'M', 'u', 'K', 'q', '$', '_', '*', 'c', 'i', 'e', 'G', 'P', 'd', '%', '/', '}', 'X', '<', ';', 't', '4', 'O', 'w', '7', '(', '1', 'b', '?', 'f', 'Q', 'h', 'V', 'R', 'A', '|', '9', '&', 'H', '.', 'l', 'a', '=', 'I', '@', 'C', '8', '6', '!', 'W', 'Z', 'o', 'm', 'Y', 's', 'v', 'E', 'k', '`', 'g', '5', '>', 'U', 'B', 'x', '2', 'F', 'r', 'N', ']', 'J', 'L', 'j', ')', ',', '[', '0', '\"', '+'};
        int i = 0;
        char c2 = '\u0000';
        while (i < 1000 && c != cArr2[i]) {
            i++;
            c2++;
        }
        i = 0;
        int i2 = 33;
        while (i < 1000 && c2 != cArr[i]) {
            i++;
            i2++;
        }
        String str = "dragon{INFOGRAMES}";
        return (((char) i2) < '!' || ((char) i2) > '/') ?
                (((char) i2) < 'a' || ((char) i2) > 'o') ?
                        (((char) i2) < 'A' || ((char) i2) > 'O') ?
                                (((char) i2) < '0' || ((char) i2) > ':') ?
                                        (((char) i2) < 'P' || ((char) i2) > 'Z') ?
                                                (((char) i2) < 'p' || ((char) i2) > 'z') ?
                                                        i2 :
                                                        i2 - 64 :
                                                i2 + 32 :
                                        i2 + 32 :
                                i2 - 32 :
                        i2 - 32 :
                i2 + 64;
    }
}
